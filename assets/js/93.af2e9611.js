(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{442:function(t,e,a){"use strict";a.r(e);var s=a(42),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"about"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about"}},[t._v("#")]),t._v(" About")]),t._v(" "),a("p",[t._v("This module exposes a wide set of utils methods and objects "),a("strong",[a("em",[t._v("highly")])]),t._v(" helpful for development.")]),t._v(" "),a("p",[t._v("For example: If you want to iterate for all the items in lol timeline events, "),a("strong",[a("em",[t._v("it would be inefficient")])]),t._v(" doing "),a("code",[t._v("await event.item.get()")]),t._v(" for every event, because Pyot's stores makes sure that all data is "),a("strong",[a("em",[t._v("safe")])]),t._v(" from any type of mutation, so stores will automatically serialize and deserialize when accessing the object, which adds up CPU time overall. The solution would be a local "),a("code",[t._v("PtrCache")]),t._v(" that saves references to the object without serializing it.")]),t._v(" "),a("p",[t._v("Another example: Pyot objects are "),a("em",[t._v("self filled")]),t._v(", therefore having them in lists will start filling the object in that list, allocating more memory over time, with a "),a("code",[t._v("FrozenGenerator")]),t._v(" it will isolate the objects from the list by returning a copy on the iteration process.")]),t._v(" "),a("h2",{attrs:{id:"imports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imports"}},[t._v("#")]),t._v(" Imports")]),t._v(" "),a("p",[t._v("The methods and objects are organized in submodules but most of them are importable at the root of this module. For example:")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pyot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PtrCache\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pyot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PtrCache\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Both of these imports are valid, have your taste.")]),t._v(" "),a("h2",{attrs:{id:"legend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#legend"}},[t._v("#")]),t._v(" Legend")]),t._v(" "),a("p",[t._v("-"),a("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}}),t._v(": This is a function.")],1),t._v(" "),a("p",[t._v("-"),a("Badge",{attrs:{text:"awaitable",type:"error",vertical:"middle"}}),t._v(": This is an awaitable.")],1)])}),[],!1,null,null,null);e.default=o.exports}}]);