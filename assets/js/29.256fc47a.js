(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{380:function(t,e,a){"use strict";a.r(e);var i=a(42),r=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" Token")]),t._v(" "),a("p",[t._v("Token used for Rate Limiting.")]),t._v(" "),a("h2",{attrs:{id:"limittoken"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limittoken"}},[t._v("#")]),t._v(" "),a("code",[t._v("LimitToken")])]),t._v(" "),a("p",[t._v("Limit Token on limiting.")]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"init-token-list-int-field-default-factory-list-flag-app-bool-false-flag-method-bool-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-token-list-int-field-default-factory-list-flag-app-bool-false-flag-method-bool-false"}},[t._v("#")]),t._v(" "),a("code",[t._v("__init__(_token: List[int] = field(default_factory=list), flag_app: bool = False, flag_method: bool = False)")])]),t._v(" "),a("p",[t._v("Creates a limit token.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("_token")]),t._v(" "),a("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> List[int]: List of limits sub tokens.")],1),t._v(" "),a("li",[a("code",[t._v("flag_app")]),t._v(" "),a("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> bool: Flag for the app limit.")],1),t._v(" "),a("li",[a("code",[t._v("flag_method")]),t._v(" "),a("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> bool: Flag for the method limit.")],1)])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"append-val-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#append-val-int"}},[t._v("#")]),t._v(" "),a("code",[t._v("append(val: int)")]),t._v(" "),a("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}})],1),t._v(" "),a("p",[t._v("Append a subtoken.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("val")]),t._v(" "),a("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),t._v(" -> int: Subtoken to append")],1)])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"run-or-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-or-wait"}},[t._v("#")]),t._v(" "),a("code",[t._v("run_or_wait()")]),t._v(" "),a("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}}),t._v(" "),a("Badge",{attrs:{text:"awaitable",type:"error",vertical:"middle"}})],1),t._v(" "),a("p",[t._v("Decides to wait or allow the request.")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"max"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max"}},[t._v("#")]),t._v(" "),a("code",[t._v("max")]),t._v(" "),a("Badge",{attrs:{text:"property",type:"error",vertical:"middle"}})],1),t._v(" "),a("p",[t._v("Return the highest subtoken")])])])}),[],!1,null,null,null);e.default=r.exports}}]);