(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{424:function(e,t,r){"use strict";r.r(t);var a=r(42),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"token"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[e._v("#")]),e._v(" Token")]),e._v(" "),r("h2",{attrs:{id:"pipelinetoken"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pipelinetoken"}},[e._v("#")]),e._v(" "),r("code",[e._v("PipelineToken")])]),e._v(" "),r("p",[e._v("Token class is used among all the stores in the pipeline. Typically generated from "),r("code",[e._v("create_token()")]),e._v(" from "),r("code",[e._v("PyotCore")]),e._v(" objects.")]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"init-model-str-server-str-method-str-params-dict-str-any-queries-dict-str-any"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init-model-str-server-str-method-str-params-dict-str-any-queries-dict-str-any"}},[e._v("#")]),e._v(" "),r("code",[e._v("__init__(model: str, server: str, method: str, params: Dict[str, Any], queries: Dict[str, Any])")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("model")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> "),r("code",[e._v("str")]),e._v(": Name of the pipeline.")],1),e._v(" "),r("li",[r("code",[e._v("server")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> "),r("code",[e._v("str")]),e._v(": Name of the server (region/platform/locale).")],1),e._v(" "),r("li",[r("code",[e._v("method")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> "),r("code",[e._v("str")]),e._v(": Name of the method endpoint.")],1),e._v(" "),r("li",[r("code",[e._v("params")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> "),r("code",[e._v("Dict[str, Any]")]),e._v(": Dict containing the params.")],1),e._v(" "),r("li",[r("code",[e._v("queries")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> "),r("code",[e._v("Dict[str, Any]")]),e._v(": Dict containing the queries params.")],1)])]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"hash-self"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hash-self"}},[e._v("#")]),e._v(" "),r("code",[e._v("__hash__(self)")])]),e._v(" "),r("p",[e._v("Returns the hash of the token.")])]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"stringify"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stringify"}},[e._v("#")]),e._v(" "),r("code",[e._v("stringify")]),e._v(" "),r("Badge",{attrs:{text:"property",type:"error",vertical:"middle"}})],1),e._v(" "),r("p",[e._v("Returns the string version of the token.")])]),e._v(" "),r("h2",{attrs:{id:"requesttoken"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#requesttoken"}},[e._v("#")]),e._v(" "),r("code",[e._v("RequestToken")])]),e._v(" "),r("p",[e._v("Token class is used to handle request based on configured error handler.")]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"init-tries-int-0-raise-at-int-1-exception-any-none-code-int-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init-tries-int-0-raise-at-int-1-exception-any-none-code-int-0"}},[e._v("#")]),e._v(" "),r("code",[e._v("__init__(tries: int = 0, _raise_at: int = 1, _exception: Any = None, _code: int = 0)")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("tries")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> int: Number of tries attempted.")],1),e._v(" "),r("li",[r("code",[e._v("_raise_at")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> int: Number of try to raise exception.")],1),e._v(" "),r("li",[r("code",[e._v("_exception")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> Any: Exception to raise.")],1),e._v(" "),r("li",[r("code",[e._v("_code")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> int: Status code of the request.")],1)])]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"stream-code-int-how-tuple-origin-str"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream-code-int-how-tuple-origin-str"}},[e._v("#")]),e._v(" "),r("code",[e._v("stream(code: int, how: Tuple, origin: str)")])]),e._v(" "),r("p",[e._v("Streams the new state to the token.")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("code")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> int: Status code of the request.")],1),e._v(" "),r("li",[r("code",[e._v("how")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> Tuple: Tuple containing the handler configs.")],1),e._v(" "),r("li",[r("code",[e._v("origin")]),e._v(" "),r("Badge",{attrs:{text:"param",type:"warning",vertical:"middle"}}),e._v(" -> str: Attempted request's pipeline token string.")],1)])]),e._v(" "),r("blockquote",[r("h3",{attrs:{id:"run-or-raise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run-or-raise"}},[e._v("#")]),e._v(" "),r("code",[e._v("run_or_raise()")]),e._v(" "),r("Badge",{attrs:{text:"function",type:"error",vertical:"middle"}}),e._v(" "),r("Badge",{attrs:{text:"awaitable",type:"error",vertical:"middle"}})],1),e._v(" "),r("p",[e._v("Decide if the the request should be made or raise exception.")])])])}),[],!1,null,null,null);t.default=i.exports}}]);